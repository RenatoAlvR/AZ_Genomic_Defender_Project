# =========================
# CONFIG FILE FOR GENOMIC POISONING DETECTOR (Minimal for SynCell via CAE & GNN-AE)
# =========================

# === General Settings ===
experiment_name: "syn_cell_detect_quick_v1"
seed: 42
output_base_dir: "outputs" # Unified output directory for logs, models, results

logging:
  level: "INFO" # DEBUG, INFO, WARNING, ERROR
  log_to_file: true
  # log_file_path will be set programmatically, e.g., outputs/logs/run_timestamp.log

# === Data Settings (Primarily for preprocessor input paths if not CLI) ===
# These paths are usually provided via CLI in main.py.
# data:
#   matrix_path: "path/to/your/matrix.mtx"
#   features_path: "path/to/your/features.tsv"
#   barcodes_path: "path/to/your/barcodes.tsv"

# === Preprocessing Settings ===
preprocessing:
  min_genes_per_cell: 100    # Adjusted for potentially sparse data
  min_cells_per_gene: 3
  n_top_genes: 3000         # Number of Highly Variable Genes to select (CRUCIAL)
  n_pca_components: 50      # Final dimension after PCA, input_dim for models
  n_neighbors_graph: 15     # For k-NN graph construction for GNN
  normalize_method: "log1p" # e.g., log1p, cpm
  scale_data: true
  split_ratio: 0.8          # Train/validation split ratio
  random_state: 42

# === Model Global Config ===
# Common settings applied if not overridden in model-specific sections
global_model_config:
  device: "auto"            # "auto", "cuda", "cpu"
  use_mixed_precision: true # For GPU training efficiency
  num_workers: 0            # For DataLoaders (0 for main process on Windows)

# === Model Specific Configurations ===
GNN: # Graph Neural Network Autoencoder
  enable: true
  model_class_name: "GNNAutoencoder" # For dynamic loading
  # Task-specific head enabling
  SynCell: true             # Enable Synthetic Cell detection head
  LabelFlip: false
  InjNoise: false
  # Architecture (input_dim will be set from n_pca_components)
  # input_dim: set_by_preprocessor (n_pca_components)
  hidden_dims: [128, 64]    # GNN hidden layers
  latent_dim: 32
  dropout: 0.2
  edge_dropout: 0.1
  conv_type: 'GCN'
  heads: 4                  # For GATConv if used
  num_conv_layers: 2        # Should match length of hidden_dims generally
  # Training
  use_graph_sampling: true  # CRUCIAL for low-resource. Uses NeighborLoader.
  batch_size: 128           # Num seed nodes for NeighborLoader / batch for full graph
  num_neighbors: [10, 5]    # Fan-out for NeighborLoader (len must match num_conv_layers)
  epochs: 50                # Max epochs
  patience: 10              # Early stopping patience
  learning_rate: 0.001
  weight_decay: 0.00001
  # Loss weights (only SynCell and recon are relevant now)
  loss_weights:
    recon: 0.7
    synth: 0.3
    flip: 0.0
    noise: 0.0

CAE: # Contrastive Autoencoder (or general AE for this quick setup)
  enable: true
  model_class_name: "ContrastiveAutoencoder" # Or your specific CAE class name
  # Task-specific flags (CAE might use reconstruction error for SynCell or have a head)
  SynCell: true             # Indicates this model contributes to SynCell detection
  # Architecture (input_dim will be set from n_pca_components)
  # input_dim: set_by_preprocessor (n_pca_components)
  hidden_dims: [256, 128]   # Encoder hidden layers
  latent_dim: 64
  dropout: 0.2
  # For actual Contrastive loss (if used, otherwise it's a standard AE)
  # temperature: 0.07
  # projection_dim: 128 # Dimension of the projection head for contrastive loss
  # Training
  batch_size: 128           # Batch size for feature matrix
  epochs: 50
  patience: 10
  learning_rate: 0.001
  weight_decay: 0.00001
  # Loss weights (e.g., if it has reconstruction + a specific SynCell head loss or contrastive loss)
  loss_weights:
    recon: 1.0              # Example: if primarily reconstruction-based for anomaly
    # contrastive: 0.5      # If actual contrastive training
    # syn_head: 0.5         # If it has a dedicated supervised head for syn_cell

VAE:
  enable: false
  # ... (params can remain for future use, but won't be loaded if enable=false) ...

DDPM:
  enable: false
  # ... (params can remain for future use, but won't be loaded if enable=false) ...

# === Detection Fusion Strategy (Simplified for CAE & GNN-AE) ===
# This section would be used by your PoisonDetector class
detection_fusion:
  method: "weighted_average"
  # Weights for models active in SynCell detection
  # The keys here should match how models are identified in the detection results
  weights:
    GNNAutoencoder: 0.6      # Example weight
    ContrastiveAutoencoder: 0.4 # Example weight
  final_threshold: 0.5         # Threshold on the fused score